USE internet_945
GO 
--запрос с использованием операторов сравнения
-- первые 3 договора
select *
from Договор
where [Номер договора] < 4
--запрос на использование комбинации логических операторов;  
--запрос с использованием логических операторов AND, OR и NOT;
--обязательно вывести договоры в (3-7) и все, которые не премиум и не заключены 4 сотрудником
select *
from Договор
where ([Номер договора] < 8) and ([Номер договора] > 2) or ([Название Тарифа] <> 'премиум' and not [ID Сотрудника] = 4)
--запрос на использование выражений над столбцами;  
select [ФИО Сотрудника], (Оклад/72)	AS [оклад в $]
from Сотрудник
---	запрос с проверкой на принадлежность множеству;
--вывести договора с название 'все','премиум'
select *
from Договор
where [Название Тарифа] in ('все','премиум')
--запрос с проверкой на принадлежность диапазону значений;
--догора заключенные с 2016 по 2017 годы
select *
from Договор
where year([Дата и время]) between 2016 and 2017
--Запрос с проверкой на соответствие шаблону
--клиент с последними цифрами в паспорте 12
select *
from Клиенты
where [Серия и номер паспорта]  like '%12'
--запрос с проверкой на неопределенное значение
--тариф без описания
select *
from тариф
where Описание is null
--запрос на объединение таблиц
--сотрудники у которых в ФИО есть буквы П или М
select *
from Сотрудник
where [ФИО Сотрудника] like '%П%'
union
select *
from Сотрудник
where [ФИО Сотрудника] like '%М%'
--запрос на пересечение таблиц;  
--сотрудники у которых в ФИО есть буквы А и Ь
select *
from Сотрудник
where [ФИО Сотрудника] like '%А%'
intersect
select *
from Сотрудник
where [ФИО Сотрудника] like '%Ь%'
--запрос на вычитание таблиц;  
--сотрудники у которых в ФИО есть буквы А но нету Е
select *
from Сотрудник
where [ФИО Сотрудника] like '%А%'
Except
select *
from Сотрудник
where [ФИО Сотрудника] like '%Е%'
--	запрос с использованием декартового произведения таблиц
-- получение декартова произведения  Договор и Сотрудник
select Договор.*, Сотрудник.*
from Договор,Сотрудник
--запрос с использованием соединения двух таблиц по равенству и условием отбора;
--получить Номер договора, Название Тарифа и ФИО Сотрудника, где тариф это тарифище
select [Номер договора], [Название Тарифа], [ФИО Сотрудника]
from Договор join Сотрудник on Договор.[ID Сотрудника] = Сотрудник.[ID Сотрудника]
where [Название Тарифа] = 'тарифище'
--Запрос с использованием соединения трех таблиц по равенству и условием отбора
--получить Номер договора, Название Тарифа , ФИО Сотрудника и ФИО Клиента, где тариф это тарифище
select [Номер договора], [Название Тарифа], [ФИО Сотрудника], [ФИО Клиента]
from Договор join Сотрудник   on Договор.[ID Сотрудника] = Сотрудник.[ID Сотрудника] 
 join Клиенты on Договор.[ID Клиента]=Клиенты.[ID Клиента]
where [Название Тарифа] = 'тарифище'
---	запрос с использованием соединения по четырем таблицам;
--вывести Название Тарифа, ФИО Сотрудника, ФИО Клиента которые были заключены в 2016 году
select договор.[Название Тарифа], [ФИО Сотрудника], [ФИО Клиента]
from Договор join Сотрудник   on Договор.[ID Сотрудника] = Сотрудник.[ID Сотрудника] 
 join Клиенты on Договор.[ID Клиента]=Клиенты.[ID Клиента]
 join Тариф on Договор.[Название Тарифа]=Тариф.[Название Тарифа]
 where year([Дата и время])=2016
 --запрос с использованием левого внешнего соединения; 
select distinct договор.[Название Тарифа], [Объем трафика]
 from Договор left join Тариф on Договор.[Название Тарифа]=Тариф.[Название Тарифа]
 --запрос с использованием правого внешнего соединения; 
 select distinct договор.[Название Тарифа], [Объем трафика]
 from Договор right join Тариф on Договор.[Название Тарифа]=Тариф.[Название Тарифа]
 --запрос с использованием функции COUNT
 --Вывести кол-во договоров заключенных 9 сотрудником
 select COUNT([Номер договора]) as [Кол-во договоров 9го сотрудника]
 from Договор
 where [ID Сотрудника] = 9
 --запрос с использованием функции SUM
 --Затраты на выдачу зарплаты Менеджероам
 select sum(Оклад) as [Затраты на Менеджеров]
 from Сотрудник
 where Специализация = 'Менеджер'
 --3 запроса с использованием временных функций;
 --договора с 2015 или 2ой месяй или 11 день
 select *
 from Договор
 where year([Дата и время])=2015 or month([Дата и время])=02 or day([Дата и время])=11
 --запрос с использованием группировки по одному столбцу
 --Затраты на выдачу зарплаты по специальности
 select Специализация,sum(Оклад) as [Сумма затрат]
 from Сотрудник
 group by Специализация 
 --Запрос на использование группировки по нескольким столбцам
 --вывести фио сотрудников заключившие договора со следующими названиями: тарифище/премиум/мой онлайн
 select [Название Тарифа], [ФИО Сотрудника],  Сотрудник.[ID Сотрудника]
from Договор join Сотрудник on Договор.[ID Сотрудника] = Сотрудник.[ID Сотрудника]
where [Название Тарифа] = 'тарифище' or [Название Тарифа] = 'премиум' or [Название Тарифа] = 'мой онлайн'
group by [Название Тарифа], Сотрудник.[ID Сотрудника], [ФИО Сотрудника]
--запрос с использованием условия отбора групп HAVING
--Затраты на выдачу зарплаты по специальности > 40000
 select Специализация,sum(Оклад) as [Сумма затрат]
 from Сотрудник
 group by Специализация 
 having sum(Оклад) > 40000
 --запрос с использованием сортировки по столбцу
 --Затраты на выдачу зарплаты по специальности отсортировав по убыванию
  select Специализация,sum(Оклад) as [Сумма затрат]
 from Сотрудник
 group by Специализация
 order by sum(Оклад) desc
 --запрос на добавление новых данных в таблицу;
 --
 INSERT INTO Сотрудник VALUES 
('Примеров Пример Примерович',	'1998-09-11',0,11000, 'Стажер')
--	запрос на добавление новых данных по результатам выполненного запроса
--
CREATE TABLE Сотрудник1(
[ФИО Сотрудника] nchar(30) not null check ([ФИО Сотрудника] like '[А-Я]%'),
[Дата рождения] date not null check ([Дата рождения] < '2000-12-30'), 
Стаж int check ( Стаж >= 0 and Стаж < 75), 
Оклад money not null check (оклад > 0) default 11000, 
Специализация nchar(20) not null, 
[ID Сотрудника] int not null identity (1, 1) 
) 
DBCC CHECKIDENT('Сотрудник1', RESEED, 1) --сброс счетчика 
use Internet11
set IDENTITY_INSERT Сотрудник1 on
INSERT INTO Сотрудник1([ФИО Сотрудника],[Дата рождения],Стаж,Оклад,Специализация,[ID Сотрудника])
	select *
	from Сотрудник
	where [ID Сотрудника] = 1
--	запрос на обновление существующих данных в таблице
--добавить оклад для сотрудника во второй таблице
update Сотрудник1
set Оклад = Оклад + 100
---запрос на обновление существующих данных по результатам подзапроса во фразе WHERE;  
--добавить оклад для сотрудников с стажем больше 5 
update Сотрудник1
set Оклад = Оклад + 100
where стаж > 5
--	запрос на удаление существующих данных; 
--удалить все записи в таблице сотрудник1
delete 
from Сотрудник1
--	запрос на удаление существующих данных по результатам подзапроса во фразе WHERE; 
--удалить данные в которых стоимость тарифа меньше 200 или больше 500
delete 
from Тариф 
where Стоимость < 200 or Стоимость > 500
---	запрос на удаление существующих данных из одной таблицы на основе связанных с ней таблиц. 
--удалить договора заключенные сотрудниками со стажем <4
delete 
	from Договор 
	where [ID Сотрудника] in (
				select [ID Сотрудника]
				from Сотрудник
				where Стаж < 4)

--Многотабличные запросы с использованием подзапросов:  
--3 запроса с использованием операций сравнения; 
--Вывести сотрудников  которые родились позжеи раньше среднего года рождения
--и вывести тех кто не родился в "средний год"
select  *
from Сотрудник 
where year([Дата рождения]) > (
	(select avg(year([Дата рождения]))
	from Сотрудник)
	)
--
select  *
from Сотрудник 
where year([Дата рождения]) < (
	(select avg(year([Дата рождения]))
	from Сотрудник)
	)
--
select  *
from Сотрудник 
where year([Дата рождения]) <> (
	(select avg(year([Дата рождения]))
	from Сотрудник)
	)
--запрос с использованием операции IN 
-- вывести догова где год рождения сотрудника < 1987
select *
from Договор
where [ID Сотрудника] not in (select [ID Сотрудника]
							from Сотрудник
							where year([Дата рождения]) < 1987)
--запрос с использованием операции ANY;  
--Вывести всех кроме людей которые старше всех по году рождения
select *
from Сотрудник
where year([Дата рождения]) > any (select year([Дата рождения])
							from Сотрудник)
--запрос с использованием операции ALL; 
--Вывести людей которые старше всех(учитывать только год)
select *
from Сотрудник
where year([Дата рождения]) <=all (select year([Дата рождения])
							from Сотрудник)
--запрос с использованием операции EXISTS; 
--Вевести полную информацию о сотрудниках которые заключали договора
select *
from Сотрудник
where exists (select  [ID Сотрудника]
			from Договор
			where Сотрудник.[ID Сотрудника] =Договор.[ID Сотрудника])
--запрос с использованием двух вложенных друг в друга подзапросов
--Вывести договора в которых сотрудники старше
--клиентов при условии id клиента = id сотрудника
select *
from Договор
where [Номер договора] in (select  [ID Клиента]
			from Клиенты
			where year([Дата рождения]) > (select year([Дата рождения])
					from Сотрудник
					where Сотрудник.[ID Сотрудника] =Клиенты.[ID Клиента]))	

--запрос с использованием трех вложенных друг в друга подзапросов
--
select *
from Договор
where [Номер договора] in (select  [ID Клиента]
			from Клиенты
			where year([Дата рождения]) in (select year([Дата рождения])
					from Сотрудник
					where [ID Сотрудника] in (select [id клиента]
											from Клиенты
											where [id клиента] is not null)))

--запрос на добавление нового столбца к таблице
--Добавить id тарифа в таблицу тариф
alter table тариф add [id Тарифа] int not null identity (1, 1)
--запрос на изменение типа данных в таблице; 
--
ALTER TABLE тариф ALTER COLUMN [id Тарифа] smallint not null 
--запрос на добавление нового ограничения к таблице
--
ALTER TABLE тариф
 	ADD CONSTRAINT UNIQ_idТарифа unique ([id Тарифа]) 
--запрос на удаление нового столбца к таблице; 
--запрос на удаление нового ограничения к таблице; 
--
ALTER TABLE тариф
 	DROP CONSTRAINT UNIQ_idТарифа 
ALTER TABLE тариф 
	DROP COLUMN [id Тарифа] 
--запрос на добавление нового первичного ключа к таблице с сохранением целостности таблицы; 
alter table Тариф add [id Тарифа] int not null identity (1, 1)
alter table Договор add [id Тарифа] int null  
	ALTER TABLE Договор
 		DROP CONSTRAINT FK_Договор_Тариф
	ALTER TABLE Тариф
 		DROP CONSTRAINT PK_Тариф 
ALTER TABLE Тариф
 	ADD CONSTRAINT PK_id_Тарифа primary key ([id Тарифа])
ALTER TABLE Договор
 	ADD CONSTRAINT FK_Договор_id_Тарифа foreign key ([id Тарифа]) references тариф([id Тарифа]) ON DELETE CASCADE 


